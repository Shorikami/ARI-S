#version 430
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 3) uniform BlurKernel
{
  vec4 weights[101];
};

uniform int halfKernel;

layout (rgba32f) uniform readonly image2D src;
layout (rgba32f) uniform writeonly image2D dst;


int cache = 128 + 2 * halfKernel;
int load = (cache + (128 - 1)) / 128;

shared vec4 v[128 + 101];

void main()
{
	ivec2 size = imageSize(src);
	ivec2 gPos = ivec2(gl_GlobalInvocationID.xy);
	int origin = int(gl_WorkGroupID.x) * 128 - halfKernel;
	
	for (int i = 0; i < load; ++i)
	{
		int local = int(gl_LocalInvocationID.x) * load + i;
		
		// Check to see if within bounds
		if (local < cache)
		{
			int px = origin + local;
			
			if (px >= 0 && px < size.x)
			{
				v[local] = imageLoad(src, ivec2(px, gPos.y));
			}
		}
	}
	
	barrier();
	
	vec4 sum = vec4(0.0f);
	for (int i = 0; i <= 2 * halfKernel; ++i)
	{
		ivec2 px = gPos + ivec2(i - halfKernel, 0);
		
		// Prevents blinking artifacts on edges of shadow map
		if (px.x < 0) px.x = 0;
		if (px.x >= size.x) px.x = size.x - 1;
		
		int localPos = px.x - origin;
		
		// Compute sum
		sum += weights[i].x * v[localPos];
	}
		
	// Store sum at gpos in dst image
	imageStore(dst, gPos, sum);
}