#version 450 core
layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba16f) uniform readonly imageCube src;
layout (binding = 1, rgba32f) uniform writeonly imageCube dst;

const float PI = 3.14159265359f;
const vec2 mapSize = vec2(512.0f, 512.0f);

struct Harmonic
{
	float val[9];
};

struct Colors
{
	vec3 val[9];
};

float Max3(vec3 v)
{
	return max(max(v.x, v.y), v.z);
}

vec3 CubeToWorld(ivec3 cubeCoord, vec2 size)
{
	vec2 coord = vec2(cubeCoord.xy) / size;
	coord = coord * 2.0f - 1.0f;
	
	switch (cubeCoord.z)
	{
		case 0:
			return vec3(1.0f, -coord.yx);
		case 1:
			return vec3(-1.0f, -coord.y, coord.x);
		case 2:
			return vec3(coord.x, 1.0f, coord.y);
		case 3:
			return vec3(coord.x, -1.0f, -coord.y);
		case 4:
			return vec3(coord.x, -coord.y, 1.0f);
		case 5:
			return vec3(-coord.xy, -1.0f);
	}
	
	return vec3(0.0f);
}

ivec3 TexCoordToCube(vec3 coord, vec2 size)
{
	vec3 absTex = abs(coord);
	coord /= Max3(absTex);
	
	float face;
	vec2 uv;
	
	if (absTex.x > absTex.y && absTex.x > absTex.z)
	{
		float nX = step(coord.x, 0.0f);
		uv = mix(-coord.zy, vec2(coord.z, -coord.y), nX);
		face = nX;
	}
	
	else if (absTex.y > absTex.z)
	{
		float nY = step(coord.y, 0.0f);
		uv = mix(coord.xz, vec2(coord.x, -coord.z), nY);
		face = 2.0f + nY;
	}
	
	else
	{
		float nZ = step(coord.z, 0.0f);
		uv = mix(vec2(coord.x, -coord.y), -coord.xy, nZ);
		face = 4.0f + nZ;
	}
	
	uv = (uv + 1.0f) * 0.5f;
	uv = uv * size;
	uv = clamp(uv, vec2(0.0f), size - vec2(1.0f));
	
	return ivec3(ivec2(uv), int(face));
}

void HarmonicProjection(in vec3 dir, out Harmonic b)
{
	b.val[0] = 0.5f * sqrt(1.0f / PI);
	
	float c = (0.5f * sqrt(3.0f / PI));
	
	b.val[1] = c * dir.y;
	b.val[2] = c * dir.z;
	b.val[3] = c * dir.x;
	
	b.val[4] = (0.5f * sqrt(15.0f / PI)) * dir.x * dir.y;
	b.val[5] = (0.5f * sqrt(15.0f / PI)) * dir.y * dir.z;
	b.val[6] = (0.25f * sqrt(5.0f / PI)) * (3.0f * pow(dir.z, 2) - 1);
	b.val[7] = (0.5f * sqrt(15.0f / PI)) * dir.x * dir.z;
	b.val[8] = (0.5f * sqrt(15.0f / PI)) * (pow(dir.x, 2) * pow(dir.y, 2));
}

const float sampleDelta = 0.025;
const float totalSamples = (2 * PI / sampleDelta) * ((PI / 2.0f) / sampleDelta); 
const float invTotalSamples = 1.0 / totalSamples;

void main()
{
	ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    vec3 worldPos = CubeToWorld(cubeCoord, mapSize);
    // tangent space from origin point
    vec3 normal = normalize(worldPos);
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, normal));
    up = cross(normal, right);

    vec3 irradiance = vec3(0.0);
    for(float phi = 0.0; phi < 2 * PI; phi += sampleDelta)
    {
        float sinPhi = sin(phi);
        float cosPhi = cos(phi);
        
        for(float theta = 0.0; theta < (PI / 2.0f); theta += sampleDelta)
        {
            float sinTheta = sin(theta);
            float cosTheta = cos(theta);

            // spherical to cartesian, in tangent space
            vec3 sphereCoord = vec3(sinTheta * cosPhi,  sinTheta * sinPhi, cosTheta);
            // tangent space to world
            vec3 sampleVec = sphereCoord.x * right + sphereCoord.y * up + sphereCoord.z * normal; 
            // world to cube coord
            ivec3 sampleCoord = TexCoordToCube(sampleVec, mapSize);

            irradiance += imageLoad(src, sampleCoord).rgb * cosTheta * sinTheta;
        }
    }
    irradiance *= PI * invTotalSamples;

    imageStore(dst, cubeCoord, vec4(irradiance, 1.0));
}